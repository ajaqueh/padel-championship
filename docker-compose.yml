# docker-compose.yml

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:14
    container_name: padel_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: padel_championship
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - padel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: padel_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: padel_championship
      DB_USER: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - padel_network
    volumes:
      - ./backend/uploads:/app/uploads
    command: >
      sh -c "
        npm run migrate &&
        npm run seed &&
        npm start
      "

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: padel_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - padel_network

volumes:
  postgres_data:

networks:
  padel_network:
    driver: bridge

# backend/Dockerfile

FROM node:18-alpine

WORKDIR /app

# Copiar package.json y package-lock.json
COPY package*.json ./

# Instalar dependencias
RUN npm ci --only=production

# Copiar c√≥digo fuente
COPY . .

# Construir la aplicaci√≥n
RUN npm run build

# Crear directorio para uploads
RUN mkdir -p uploads

# Exponer puerto
EXPOSE 3001

# Usuario no privilegiado
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001
RUN chown -R nextjs:nodejs /app
USER nextjs

# Comando por defecto
CMD ["npm", "start"]

---

# frontend/Dockerfile

# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Copiar package.json y package-lock.json
COPY package*.json ./

# Instalar dependencias
RUN npm ci

# Copiar c√≥digo fuente
COPY . .

# Construir la aplicaci√≥n
RUN npm run build

# Production stage
FROM nginx:alpine

# Copiar build de React
COPY --from=build /app/build /usr/share/nginx/html

# Copiar configuraci√≥n de nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Exponer puerto
EXPOSE 3000

CMD ["nginx", "-g", "daemon off;"]

# frontend/nginx.conf

server {
    listen 3000;
    server_name localhost;
    
    root /usr/share/nginx/html;
    index index.html index.htm;
    
    # Manejo de SPA (Single Page Application)
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Cacheo de assets est√°ticos
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Proxy para API calls
    location /api/ {
        proxy_pass http://backend:3001/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
}

# .env.example

# Backend Environment Variables
NODE_ENV=development
PORT=3001

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=padel_championship
DB_USER=postgres
DB_PASSWORD=postgres

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# Frontend URL for CORS
FRONTEND_URL=http://localhost:3000

# File Upload Configuration
MAX_FILE_SIZE=10485760  # 10MB
UPLOAD_DIR=uploads

# frontend/.env.example

# API Configuration
REACT_APP_API_URL=http://localhost:3001/api

# App Configuration  
REACT_APP_APP_NAME=P√°del Championship Manager
REACT_APP_VERSION=1.0.0

# init.sql

-- Script de inicializaci√≥n de base de datos
-- Este archivo se ejecuta autom√°ticamente cuando se crea el contenedor de PostgreSQL

-- Crear extensiones √∫tiles
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Configurar timezone
SET timezone = 'America/Santiago';

-- Las tablas se crear√°n mediante las migraciones
-- Este archivo es solo para configuraci√≥n inicial

# backend/tsconfig.json

{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020"],
    "module": "commonjs",
    "rootDir": "./src",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": false,
    "removeComments": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "typeRoots": ["./node_modules/@types"],
    "types": ["node", "jest"]
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "**/*.test.ts",
    "**/*.spec.ts"
  ]
}

# frontend/tsconfig.json

{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "es6"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

# frontend/tailwind.config.js

module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        }
      }
    },
  },
  plugins: [],
}

# frontend/src/index.css

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Estilos personalizados */
.loading-spinner {
  @apply animate-spin rounded-full border-2 border-gray-300 border-t-blue-600;
}

/* Tabla de posiciones */
.standings-table {
  @apply min-w-full divide-y divide-gray-200;
}

.standings-row:hover {
  @apply bg-gray-50;
}

/* Modales */
.modal-overlay {
  @apply fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50;
}

.modal-container {
  @apply relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white;
}

/* Botones personalizados */
.btn-primary {
  @apply bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;
}

.btn-secondary {
  @apply bg-gray-200 text-gray-900 px-4 py-2 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2;
}

.btn-danger {
  @apply bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2;
}

/* Estados de posici√≥n */
.position-gold {
  @apply bg-yellow-50 border-yellow-400 border-l-4;
}

.position-silver {
  @apply bg-gray-50 border-gray-400 border-l-4;
}

.position-bronze {
  @apply bg-amber-50 border-amber-400 border-l-4;
}

# .gitignore

# Dependencias
node_modules/
*/node_modules/

# Archivos de producci√≥n
/backend/dist
/frontend/build

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Archivos de entorno
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Base de datos
*.db
*.sqlite

# Uploads
uploads/
*/uploads/

# Coverage
coverage/
*.lcov

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Docker
.dockerignore

# Temporal
*.tmp
*.temp

# README.md

# Sistema de Gesti√≥n de Campeonatos de P√°del

Sistema completo para la gesti√≥n de campeonatos de p√°del que soporta formatos din√°micos (liga, torneo con fase de grupos, y "americano"), permite un n√∫mero variable de participantes y grupos, y gestiona dos tipos de usuarios: administrador de sistema y gestor del club.

## üéØ Caracter√≠sticas Principales

### Release 1 (MVP) - ‚úÖ COMPLETO
- ‚úÖ **Formato Liga (round-robin)** con N parejas din√°micas y opci√≥n de dividir en X grupos
- ‚úÖ **CRUD completo** de parejas, campeonatos, partidos y canchas
- ‚úÖ **Generaci√≥n autom√°tica de fixtures** usando algoritmo de Berger
- ‚úÖ **Registro de resultados** y tabla de posiciones con reglas de desempate completas
- ‚úÖ **Autenticaci√≥n JWT** con roles admin y gestor
- ‚úÖ **Caso espec√≠fico 18/16/10/10** implementado y probado

### Funcionalidades Implementadas
- üèÜ Gesti√≥n completa de campeonatos
- üë• Gesti√≥n de equipos (parejas)
- ‚öΩ Gesti√≥n de partidos con sets y juegos
- üèüÔ∏è Gesti√≥n de canchas
- üìä Tabla de posiciones con reglas de desempate exactas
- üîê Sistema de autenticaci√≥n y autorizaci√≥n
- üì± Interfaz web responsive
- üê≥ Deployment con Docker
- üß™ Tests unitarios completos

## üèóÔ∏è Arquitectura T√©cnica

### Stack Tecnol√≥gico
- **Backend**: Node.js + Express + TypeScript
- **Base de Datos**: PostgreSQL 14
- **Frontend**: React + TypeScript + Tailwind CSS
- **Autenticaci√≥n**: JWT
- **Testing**: Jest + Supertest
- **Containerizaci√≥n**: Docker + Docker Compose

### Estructura del Proyecto
```
padel-championship/
‚îú‚îÄ‚îÄ backend/                 # API Node.js + Express
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ controllers/     # Controladores REST
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/        # L√≥gica de negocio
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ middleware/      # Middleware de auth y validaci√≥n
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes/          # Definici√≥n de rutas
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tests/          # Tests unitarios e integraci√≥n
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils/          # Migraciones y seeds
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ frontend/               # Aplicaci√≥n React
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/     # Componentes reutilizables
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/         # P√°ginas de la aplicaci√≥n  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/      # Servicios de API
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ contexts/      # Contextos de React
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ docker-compose.yml     # Configuraci√≥n de servicios
‚îî‚îÄ‚îÄ README.md
```

## üöÄ Instalaci√≥n y Uso

### Opci√≥n 1: Docker (Recomendado)

```bash
# 1. Clonar el repositorio
git clone <repository-url>
cd padel-championship

# 2. Levantar todos los servicios
docker-compose up --build

# 3. Los servicios estar√°n disponibles en:
# - Frontend: http://localhost:3000
# - Backend API: http://localhost:3001
# - PostgreSQL: localhost:5432
```

### Opci√≥n 2: Instalaci√≥n Manual

```bash
# Backend
cd backend
npm install
cp .env.example .env
# Configurar variables en .env
npm run migrate
npm run seed
npm run dev

# Frontend (en otra terminal)
cd frontend  
npm install
cp .env.example .env
# Configurar variables en .env
npm start
```

## üß™ Ejecutar Tests

```bash
# Tests del backend
cd backend
npm test                    # Tests unitarios
npm run test:coverage     # Con cobertura

# Tests espec√≠ficos del algoritmo de fixtures
npm test -- fixtureService.test.ts

# Tests espec√≠ficos de standings y desempates  
npm test -- standingsService.test.ts

# Test de integraci√≥n del caso 18/16/10/10
npm test -- standings.test.ts
```

## üë§ Usuarios de Prueba

El sistema viene pre-cargado con usuarios de demostraci√≥n:

```
Admin:
- Email: admin@padel.com  
- Password: admin123

Gestor:
- Email: gestor@padel.com
- Password: gestor123
```

## üéØ Caso de Prueba Espec√≠fico: 18/16/10/10

El sistema incluye un campeonato de ejemplo configurado con el escenario espec√≠fico solicitado:

### Datos del Escenario
- **Equipo Alpha**: 18 juegos ganados (1er lugar)
- **Equipo Beta**: 16 juegos ganados (2do lugar)  
- **Equipo Gamma**: 10 juegos ganados (4to lugar)
- **Equipo Delta**: 10 juegos ganados (3er lugar)

### Desempate Aplicado
Gamma y Delta est√°n empatados con 10 juegos ganados cada uno. El sistema aplica correctamente el desempate por **head-to-head**: Delta supera a Gamma porque gan√≥ el partido directo entre ambos equipos.

### Verificaci√≥n
1. Acceder a http://localhost:3000
2. Iniciar sesi√≥n con las credenciales de demo
3. Ir a **Campeonatos** ‚Üí **Liga de P√°del Ejemplo - Caso 18/16/10/10**
4. Ver **Posiciones** para verificar el orden correcto
5. Revisar que Delta (3¬∞) est√° por encima de Gamma (4¬∞) con el mismo n√∫mero de juegos

## üìä Reglas de Desempate Implementadas

El sistema aplica las reglas de desempate en el siguiente orden:

1. **Puntos obtenidos** (victoria = 3 pts, derrota = 0 pts por defecto)
2. **Partidos ganados**
3. **Total de juegos ganados** (solo para formato americano)
4. **Head-to-head** (resultado directo entre equipos empatados)
5. **Diferencia de juegos** (juegos ganados - juegos perdidos)
6. **Mayor n√∫mero de sets ganados**
7. **Diferencia de sets** (sets ganados - sets perdidos)
8. **En caso de empate total**: partido de desempate o sorteo

## üîå API Endpoints

### Autenticaci√≥n
```
POST /api/auth/login       # Iniciar sesi√≥n
POST /api/auth/register    # Registrar usuario  
POST /api/auth/refresh     # Renovar token
```

### Campeonatos
```
GET    /api/championships                    # Listar campeonatos
POST   /api/championships                    # Crear campeonato
GET    /api/championships/:id                # Obtener campeonato
PUT    /api/championships/:id                # Actualizar campeonato
DELETE /api/championships/:id                # Eliminar campeonato
POST   /api/championships/:id/generate-fixtures  # Generar fixtures
GET    /api/championships/:id/standings      # Obtener posiciones
```

### Equipos
```
GET    /api/teams/championships/:id/teams    # Listar equipos del campeonato
POST   /api/teams/championships/:id/teams    # Crear equipo
PUT    /api/teams/:id                        # Actualizar equipo
DELETE /api/teams/:id                        # Eliminar equipo
POST   /api/teams/championships/:id/import-csv  # Importar equipos desde CSV
```

### Partidos  
```
GET    /api/matches/championships/:id/matches    # Listar partidos del campeonato
GET    /api/matches/:id                          # Obtener partido espec√≠fico
POST   /api/matches                              # Crear partido
PUT    /api/matches/:id                          # Actualizar partido
DELETE /api/matches/:id                          # Eliminar partido
POST   /api/matches/:id/result                   # Registrar resultado
```

### Canchas
```
GET    /api/courts         # Listar canchas
POST   /api/courts         # Crear cancha
PUT    /api/courts/:id     # Actualizar cancha
DELETE /api/courts/:id     # Eliminar cancha
```

## üßÆ Algoritmos Core

### Generaci√≥n de Fixtures (Algoritmo de Berger)
El sistema implementa el algoritmo de Berger para generar fixtures round-robin, asegurando que:
- Todos los equipos se enfrenten exactamente una vez
- Se distribuyan equitativamente las rondas
- Soporte n√∫meros pares e impares de equipos
- Manejo de m√∫ltiples grupos

### C√°lculo de Standings
Sistema completo de c√°lculo de posiciones que:
- Procesa todos los partidos finalizados
- Aplica puntuaci√≥n configurable por campeonato
- Implementa todas las reglas de desempate especificadas
- Actualiza autom√°ticamente tras cada resultado
- Maneja casos edge como empates circulares

## üìà Mejoras Futuras (Release 2)

1. **Formato Torneo Completo**
   - Fase de grupos + eliminaci√≥n directa
   - Seedings autom√°ticos
   - Bracket visualization

2. **Formato Americano Avanzado**
   - Rotaci√≥n autom√°tica de parejas
   - M√∫ltiples rondas con rankings din√°micos

3. **Roles y Permisos Refinados**
   - Rol Jugador-visualizador
   - Permisos granulares por campeonato
   - Multi-tenant (m√∫ltiples clubes)

4. **Funcionalidades Avanzadas**
   - Dashboard con estad√≠sticas
   - Notificaciones autom√°ticas
   - Gesti√≥n de horarios avanzada
   - Integraci√≥n con pagos
   - Mobile app

5. **Tecnolog√≠a**
   - WebSockets para actualizaciones en tiempo real  
   - Cache con Redis
   - CI/CD pipeline
   - Deployment en Kubernetes

## üß™ Validaci√≥n de Calidad

### Tests Implementados
- ‚úÖ **Tests unitarios** para algoritmo de fixtures (5+ escenarios)
- ‚úÖ **Tests de desempate** incluyendo caso espec√≠fico 18/16/10/10
- ‚úÖ **Tests de integraci√≥n** para flujo completo
- ‚úÖ **Tests de API** para todos los endpoints
- ‚úÖ **Validaci√≥n de datos** con esquemas Joi

### Criterios de Aceptaci√≥n Cumplidos
- ‚úÖ Crear campeonato Liga con N parejas
- ‚úÖ Generar fixture round-robin autom√°tico  
- ‚úÖ Ingresar resultados por sets y juegos
- ‚úÖ Mostrar standings con reglas de desempate correctas
- ‚úÖ Caso espec√≠fico 18/16/10/10 funcionando
- ‚úÖ Sistema levanta con un comando: `docker-compose up`
- ‚úÖ Tests ejecutables con: `npm test`

## üèÜ Estado del Proyecto

**‚úÖ RELEASE 1 COMPLETADO**

El sistema est√° completamente funcional y cumple todos los requisitos especificados para el Release 1. Se puede usar inmediatamente para gestionar campeonatos de p√°del formato liga con todas las funcionalidades core implementadas.

### Verificaci√≥n R√°pida
```bash
# Levantar el sistema
docker-compose up --build

# Ejecutar tests  
docker-compose exec backend npm test

# Acceder al sistema
http://localhost:3000
```

El caso espec√≠fico 18/16/10/10 est√° pre-configurado y se puede verificar inmediatamente en el campeonato de ejemplo.